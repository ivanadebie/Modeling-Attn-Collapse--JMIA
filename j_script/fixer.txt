import json
import gzip
import re

input_filename = "qa_data/clean_synthetic_prompts.jsonl"
output_filename = "qa_data/fixed_synthetic_prompts.jsonl.gz"

def parse_documents_from_prompt(prompt_text):
    """
    Parses a single prompt string into a list of document dictionaries,
    including both 'title' and 'text'.
    """
    # This regex is more specific to capture both the title and the text.
    # It looks for 'Document [number] (Title: ...)' and captures the title.
    # It then captures the text that follows.
    doc_matches = re.findall(
        r'Document \[\d+\] \(Title: (.*?)\)(.*?)(?=Document \[\d+\]|$)', 
        prompt_text, 
        re.DOTALL
    )
    
    docs = []
    for match in doc_matches:
        title, text = match
        docs.append({"title": title.strip(), "text": text.strip()})
    
    # Handle the first part of the prompt that might contain the first title
    if not docs:
        first_doc_match = re.search(r'Document \[\d+\] \(Title: (.*?)\)(.*)', prompt_text, re.DOTALL)
        if first_doc_match:
            title, text_content = first_doc_match.groups()
            docs.append({"title": title.strip(), "text": text_content.strip()})
    
    return docs

def convert_data_to_ctxs_format(input_file, output_file):
    """
    Reads the original JSONL file, extracts documents, and writes a new file
    in the expected 'ctxs' format.
    """
    with open(input_file, 'r') as infile, gzip.open(output_file, 'wt') as outfile:
        for i, line in enumerate(infile):
            try:
                data = json.loads(line)
                
                if 'prompt' in data:
                    document_list = parse_documents_from_prompt(data['prompt'])
                    
                    # Add the new 'ctxs' key
                    data['ctxs'] = document_list
                    
                    # Optional: remove the original 'prompt' key
                    # data.pop('prompt', None)
                else:
                    print(f"Warning: 'prompt' key not found in line {i}. Skipping or creating empty context.")
                    data['ctxs'] = []
                
                # Write the modified JSON object to the new file
                outfile.write(json.dumps(data) + '\n')
            except json.JSONDecodeError as e:
                print(f"Error decoding JSON on line {i}: {e}. Skipping line.")

    print(f"Conversion complete. New file saved as '{output_filename}'")

# Run the conversion script
convert_data_to_ctxs_format(input_filename, output_filename)